# -*- coding: utf-8 -*-
"""correlation-4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Yr3apzSQOScI1rF9qkIwE40MlDZoqDhm

# Correlation

**Correlation** is a measure of how two datasets are related to eachother.

https://www.investopedia.com/terms/c/correlation.asp

<img src="https://www.investopedia.com/thmb/Xz1Mnf7Ji54AAfAT1fsiwcZvmxM=/750x0/filters:no_upscale():max_bytes(150000):strip_icc():format(webp)/correlation_defintion_-9d2d662781724d61af6d6322a2a294b5.jpg" height=250>


> Investment managers, traders, and analysts find it very important to calculate correlation because the risk reduction benefits of diversification rely on this statistic.

To examine correlation, let's revisit our familiar dataset of economic indicators.
"""

from pandas import read_csv

df = read_csv("https://raw.githubusercontent.com/prof-rossetti/python-for-finance/main/docs/data/monthly-indicators.csv")
df.head()

print(len(df))
print(df["timestamp"].min(), "...", df["timestamp"].max())

"""We will focus on correlation, and determining which of these indicators may be positively or negatively correlated with each other. This will allow us to answer questions like, "is gold a good hedge against inflation?".

## Data Scaling
"""

#| label: unscaled
#| fig-cap: "Unscaled Data"
#| echo: false
#| message: false

import plotly.express as px

chart_df = df.copy()
chart_df.index = df["timestamp"] # save the ts for charting, knowing we will remove it
chart_df.drop(columns=["timestamp"], inplace=True) # remove the ts column, in preparation to operate on all numeric columns

px.line(chart_df, y=["cpi", "fed", "spy", "gld",
                      #"btc"
                      ],
        title="Financial indicators over time (unscaled)")

"""We are not able to see the movement of the federal funds rate, because its scale is so much smaller than the other indicators. Let's fix this by scaling the data.

Scaling the data will make it easier to plot all these different series on a graph, so we can start to get a sense of how their movements might correlate (in an unofficial way).

### Min-Max Scaling

One scaling approach is by dividing each value over the maximum value in that column, essentially expressing each value as a percentage of the greatest value.
"""

scaled_df = df.copy()
scaled_df.index = df["timestamp"] # save the ts for charting, knowing we will remove it
scaled_df.drop(columns=["timestamp"], inplace=True) # remove the ts column, in preparation to operate on all numeric columns
# MIN-MAX SCALING:
scaled_df = scaled_df / scaled_df.max() # dividing each value by that column's maximum value

px.line(scaled_df, y=["cpi", "fed", "spy", "gld",
                      #"btc"
                      ],
        #labels = {"value": "Min/Max Scaled Value"}
        title="Financial indicators over time (min-max scaled)")

"""### Standard Scaling

An alternative approach mean-centers the data and normalizes by the standard deviation:
"""

scaled_df = df.copy()
scaled_df.index = df["timestamp"] # save the ts for charting, knowing we will remove it
scaled_df.drop(columns=["timestamp"], inplace=True) # remove the ts column, in preparation to operate on all numeric columns
# STANDARD SCALING:
scaled_df = (scaled_df - scaled_df.mean()) / scaled_df.std() # standardization / normalization

px.line(scaled_df, y=["cpi", "fed", "spy", "gld",
                      #"btc"
                      ],
        #labels = {"value": "Min/Max Scaled Value"}
        title="Financial indicators over time (standard/z-score scaled)")

"""Which indicators have been moving up or down at a time when another indicator has been moving up or down. Are there any time periods where we might start to suspect correlation in a positive or negative way?

## Correlation Considerations

Let's perform tests for correlation in more official / formal ways.

Certain methods for calculating correlation may depend on the normality of our data's distribution, or the sample size, so we should keep these in mind as we determine if we are able to calculate correlation, and which method to use.

### Parametric vs Nonparametric Methods

https://www.investopedia.com/terms/n/nonparametric-method.asp


> The nonparametric method refers to a type of statistic that does not make any assumptions about the characteristics of the sample (its parameters) or whether the observed data is quantitative or qualitative.
>
> Nonparametric statistics can include certain descriptive statistics, statistical models, inference, and statistical tests. The model structure of nonparametric methods is not specified a priori but is instead determined from data.
>
> Common nonparametric tests include Chi-Square, Wilcoxon rank-sum test, Kruskal-Wallis test, and Spearman's rank-order correlation.
>
> In contrast, well-known statistical methods such as ANOVA, Pearson's correlation, t-test, and others do make assumptions about the data being analyzed. One of the most common parametric assumptions is that population data have a "normal distribution."

## Correlation with `scipy`

We can calculate correlation between two lists of numbers, using the `pearsonr` and `spearmanr` functions from the `scipy` package.

One difference between these two correlation methods is that Spearman is more robust to (i.e. less affected by) outliers. Also being nonparametric, the Spearman method does not assume our data is normally distributed.

https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.pearsonr.html

> Pearson correlation coefficient and p-value for testing non-correlation.
>
> The Pearson correlation coefficient [1] measures the linear relationship between two datasets. Like other correlation coefficients, this one varies between -1 and +1 with 0 implying no correlation. Correlations of -1 or +1 imply an exact linear relationship. Positive correlations imply that as x increases, so does y. Negative correlations imply that as x increases, y decreases.
>
> This function also performs a test of the null hypothesis that the distributions underlying the samples are uncorrelated and normally distributed. (See Kowalski [3] for a discussion of the effects of non-normality of the input on the distribution of the correlation coefficient.) The p-value roughly indicates the probability of an uncorrelated system producing datasets that have a Pearson correlation at least as extreme as the one computed from these datasets.

https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.spearmanr.html

> Calculate a Spearman correlation coefficient with associated p-value.
>
> The Spearman rank-order correlation coefficient is a nonparametric measure of the monotonicity of the relationship between two datasets. Like other correlation coefficients, this one varies between -1 and +1 with 0 implying no correlation. Correlations of -1 or +1 imply an exact monotonic relationship. Positive correlations imply that as x increases, so does y. Negative correlations imply that as x increases, y decreases.
>
> The p-value roughly indicates the probability of an uncorrelated system producing datasets that have a Spearman correlation at least as extreme as the one computed from these datasets. Although calculation of the p-value does not make strong assumptions about the distributions underlying the samples, it is only accurate for very large samples (>500 observations). For smaller sample sizes, consider a permutation test instead (see docs for examples).
"""

from scipy.stats import pearsonr, spearmanr

x = df["cpi"]
y = df["gld"]

print("-----------")
print("PEARSON:")
result = pearsonr(x, y)
print(result)

print("-----------")
print("SPEARMAN:")
result = spearmanr(x, y)
print(result)

"""What about the correlation between each pair of indicators? We could start to use a loop-based solution:

## Correlation Matrix with `pandas`

The **correlation matrix** is a great way of displaying and communicating the correlation between each pair of variables.

If we have a pandas dataframe, we can use it's `corr()` method to produce a "correlation matrix", which shows us the "pairwise correlation of columns", in other words, the correlation of each column with respect to each other column.

https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.corr.html
"""

#df.corr(method="pearson") # method is pearson by default
df.corr(method="pearson", numeric_only=True) # numeric_only to suppress warning

#df.corr(method="spearman")
df.corr(method="spearman", numeric_only=True) # numeric_only to suppress warning

"""We may begin to notice the diagonal of 1s values. This is because each dataset is perfectly positively correlated with itself.

We may also start to notice the symmetry of values mirrored across the diagonal. In other words, the value in column 1, row 4 is the same as the value in column 4, row 1.

## Plotting Correlation Matrix

It may not be easy to quickly interpret the rest of the values in the correlation matrix, but if we plot it with colors as a "heat map" then we will be able to use color to more easily interpret the data and tell a story.

### Correlation Heatmap with `plotly`

https://plotly.com/python-api-reference/generated/plotly.express.imshow.html
"""

# https://plotly.com/python/heatmaps/
# https://plotly.com/python-api-reference/generated/plotly.express.imshow.html
import plotly.express as px

def plot_correlation_matrix(df, method="pearson"):
    """
    method: "spearman" or "pearson"
    """

    cor_mat = df.corr(method=method, numeric_only=True) # using numeric_only to suppress warning

    title= f"{method.title()} Correlation between Economic Indicators"
    fig = px.imshow(cor_mat,
                    height=450, # title=title,
                    text_auto= ".2f", # round to two decimal places
                    color_continuous_scale="Blues",
                    color_continuous_midpoint=0, # set color midpoint at zero because correlation coeficient ranges from -1 to 1 (see correlation notes)
                    labels={"x": "Indicator", "y": "Indicator"},
    )
    fig.update_layout(title={'text': title, 'x':0.485, 'xanchor': 'center'}) # https://stackoverflow.com/questions/64571789/center-plotly-title-by-default
    fig.show()

plot_correlation_matrix(df, "pearson")

plot_correlation_matrix(df, "spearman")

"""What stories can we tell with the correlation heatmap? Which indicators are most positively correlated? Which are most negatively correlated?

Is gold a hedge against inflation?

"""