# Data Encoding


When preparing features (`x` values) for training machine learning models, the models need the data to be in numeric format, in order to perform math with the values.

So if we have categorical or textual data, we will need to use a **data encoding** strategy to represent the data in a different way.


For categorical data, we'll use either an ordinal or one-hot encoding strategy, depending on whether there is a certain ordered relationship in the data or not. For time-series data, we can use time step encoding.


## Ordinal Encoding for Categorical Data

If the data has an order about it, where one category means more or less than others, then we will convert the categories into a linear range of numbered values.

## One-hot Encoding for Categorical Data


If the data is truly categorical, where there is no ordinal relationship present, we will perform "one-hot" encoding.


## Time Step Encoding for Time-series Data

When dealing with time-series data, we need to convert the dates to numbers.

We can take advantage of the linear nature of time, and model dates as integer time steps. For example, starting at one for the earliest data point, and incrementing by one with each subsequent data point. This assumes our observations are over uniform time intervals (i.e. daily, monthly, annual frequency, etc.).

To create an ordered list of time step integers, we sort our dataset by date in ascending order, putting the earliest date first. Then we add a column of integers incrementing from one to the length of the dataset:

```python
df.sort_values(by="date", ascending=True, inplace=True)

df["time_step"] = range(1, len(df) + 1)
df
```
